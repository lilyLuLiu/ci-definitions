---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: crc-qe-latest-arm64
  labels:
    app.kubernetes.io/version: "1.3"
    redhat.com/product: openshift-local
    dev.lifecycle.io/phase: qe
    openshift-local.redhat.com/component: crc
  annotations:
    tekton.dev/pipelines.minVersion: "0.44.x"
    tekton.dev/categories: build
    tekton.dev/tags: openshift-local, crc, baremetal
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This pipeline will build a linux arm64 distributable and test it. The pipeline also will test the distributable with a specific bundle

    * testing part relies on download and use custom bundle will using crc (-b option) this is why it requires the download bundle parameters
    * for the building part it will provision an arm64 machine (azure as cheapest option)
    * then for testing it will spin an aws arm64 machine
    * assets and test results will be stored on S3

  workspaces:
    - name: storage
    - name: ocp-pullsecret
      description: |
        crc secret name holding the pullsecret. This is only required if backed tested is crc preset

        secret should match following format:
        ---
        apiVersion: v1
        kind: Secret
        metadata:
          name: ${secret-name}
        type: Opaque
        data:
          pullsecret: ${pullsecret-value}

  params:
    - name: s3-credentials
      default: s3-aws-crcqe-asia
    - name: aws-credentials
      default: aws-crcqe-bot
    - name: az-credentials
      default: az-crcqe-bot
    # Existing components
    - name: bundle-base-url
      description: base url to download bundle and shasumsfile
    - name: bundle-name
      description: bundle name
    - name: bundle-shasumfile
      description: shasumfile downloadble from bundle-url to check the bundle
      default: sha256sum.txt
    - name: crc-version
      description: tag prefix for crc-e2e image
      default: next
   
   
    # CRC build param
    - name: crc-scm-pr
      default: "''"
    # QE run params
    - name: qe-worspace-subpath
      description: subpath on workspace where storing ephemeral qe results
      default: qe-results
    - name: run-e2e
      description: Control if e2e tests are executed. (true or false)
      default: 'true'
    - name: e2e-tag
      description: tags to select e2e scnearios. Default empty values which means all scnearios  
      default: "''"  
    - name: run-integration
      description: Control if integration tests are executed. (true or false)
      default: 'true'
    - name: integration-tag
      description: tags to select integration scnearios. Default empty values which means all scnearios  
      default: "''"
    - name: integration-timeout
      description: total timeout for run integration suite
      default: "120m"
    
    # Control
    - name: debug
      description: debug the task cmds
      default: 'false'
    - name: target-cleanup
      description: cleanup target ephemeral target folders on each step which requires them
      default: 'true' 
    - name: test-catalog
      default: nightly-run
      description: used for catelog in reportportal launch, nightly-run, bundle-test, crc-release-test

    # S3 target
    - name: s3-bucket
      description: bucket to upload builds assets and test results
      default: crcqe-asia
    - name: s3-path
      description: folder path inside the bucket to upload builds assets and test results
      
  results:
    - name: e2e-results-url
      description: url with e2e junit results file
      value: $(tasks.s3-upload-results.results.e2e-junit-url)
    - name: integration-results-url
      description: url with integration junit results file
      value: $(tasks.s3-upload-results.results.integration-junit-url)

  tasks:
    - name: init
      taskSpec:
        description: This task will prepare the environment and data for being used within the pipeline
        params:
          - name: bundle-name
        results:
          - name: correlation
          - name: date
          - name: bundle-version
          - name: bundle-preset
        steps:
          - name: init
            image: registry.access.redhat.com/ubi9/ubi-minimal
            script: |
              #!/bin/sh
              echo -n $RANDOM$RANDOM | tee $(results.correlation.path)
              echo -n $(date +'%Y%m%d') | tee $(results.date.path)
              name=$(params.bundle-name)
              nameArr=(${name//_/ })
              preset=${nameArr[1]}
              if [[ $preset == 'microshift' ]]; then
                version=${nameArr[3]}
              else  
                version=${nameArr[2]}
                preset='openshift'
              fi
              echo -n $version | tee $(results.bundle-version.path)
              echo -n $preset | tee $(results.bundle-preset.path)
      params:
        - name: bundle-name
          value: $(params.bundle-name)
    - name: build-arm64-binary
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/crc-org/ci-definitions
          - name: revision
            value: crc-builder-v1.1.1
          - name: pathInRepo
            value: crc-builder/tkn/crc-builder-arm64.yaml
      params:
        - name: s3-credentials
          value: $(params.s3-credentials)
        - name: az-credentials
          value: $(params.az-credentials)
        - name: crc-scm-pr
          value: $(params.crc-scm-pr)
        - name: s3-folder-path
          value: $(params.s3-path)
    - name: provision-tester
      runAfter:
        - init
        - build-arm64-binary
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/redhat-developer/mapt.git
          - name: revision
            value: main
          - name: pathInRepo
            value: tkn/infra-aws-fedora.yaml
      params:
        - name: secret-aws-credentials
          value: $(params.aws-credentials)
        - name: secret-rh-credentials
          value: credentials-rh-subs-crcqe-prod
        - name: id
          value: $(tasks.init.results.correlation)
        - name: operation
          value: create
        - name: ownerKind
          value: PipelineRun
        - name: ownerName
          value: $(context.pipelineRun.name)
        - name: ownerUid
          value: $(context.pipelineRun.uid)
        - name: arch
          value: arm64
        - name: nested-virt
          value: 'true'
        - name: tags
          value: "pipelinerunName=$(context.pipelineRun.name)"
        - name: spot-increase-rate
          value: '30'
      timeout: "20m" 
    # We need to have the host-info as a workspace
    # https://github.com/redhat-developer/mapt/issues/319  
    # also we need crc-e2e in shape on ci-definitions

    - name: host-info
      runAfter:
        - provision-tester
      taskSpec:
        description: This task will get the host info
        params:
          - name: secret-host
          - name: work-folder
        volumes:
          - name: host-secret
            secret:
              secretName: $(params.secret-host)
          - name: storage
            persistentVolumeClaim:
              claimName: pipelines-data
        results:
          - name: host
          - name: username
          - name: key-filename
        steps:
          - name: sync
            image: quay.io/rhqp/support-tools:v0.0.1
            volumeMounts:
              - name: host-secret
                mountPath: /opt/host-secret
              - name: storage
                mountPath: /opt/storage
            script: |
              #!/bin/sh 

              set -exuo pipefail

              HOST_FILENAME=host
              USERNAME_FILENAME=username
              KEY_FILENAME=id_rsa
              
              workspace_path="/opt/host-secret"
              work_folder="/opt/storage/$(params.work-folder)"
              
              mkdir -p ${work_folder}
              cp "${workspace_path}/${KEY_FILENAME}" ${work_folder}/id_rsa 

              # Set results
              cat "${workspace_path}/${HOST_FILENAME}" | tee $(results.host.path)   
              cat "${workspace_path}/${USERNAME_FILENAME}" | tee $(results.username.path)  
              echo -n "${KEY_FILENAME}" | tee $(results.key-filename.path)  
      params:
      - name: secret-host
        value: $(tasks.provision-tester.results.host-access-secret)
      - name: work-folder
        value: $(tasks.init.results.correlation)
      timeout: "20m" 
    - name: download-bundle
      runAfter:
        - host-info
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/crc-org/ci-definitions
          - name: revision
            value: crc-support-v1.1.1
          - name: pathInRepo
            value: crc-support/tkn/task.yaml
      params:
        - name: secret-host
          value: $(tasks.provision-tester.results.host-access-secret)
        - name: asset-base-url
          value: $(params.bundle-base-url) 
        - name: asset-name
          value: $(params.bundle-name)
        - name: asset-shasum-name
          value: $(params.bundle-shasumfile)
        - name: install
          value: 'false'
        - name: force-fresh
          value: 'false'
        - name: debug
          value: $(params.debug)
    - name: install-binary
      runAfter:
        - host-info
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/crc-org/ci-definitions
          - name: revision
            value: crc-support-v1.1.1
          - name: pathInRepo
            value: crc-support/tkn/task.yaml
      params:
        - name: secret-host
          value: $(tasks.provision-tester.results.host-access-secret)
        - name: asset-base-url
          value: $(tasks.build-arm64-binary.results.downloadable-base-url)
        - name: asset-name
          value: $(tasks.build-arm64-binary.results.distributable-name)
        - name: asset-shasum-name
          value: $(tasks.build-arm64-binary.results.shasumfile)
        - name: force-fresh
          value: 'false'
        - name: debug
          value: $(params.debug) 
    - name: qe
      runAfter:
        - install-binary
        - download-bundle
      taskRef:
        resolver: bundles 
        params:
        - name: bundle
          value: quay.io/rhqp/crc-e2e-tkn:v1.0.0
        - name: name
          value: crc-e2e
        - name: kind
          value: task
      params:
      - name: os
        value: linux
      - name: arch
        value: arm64
      - name: host
        value: $(tasks.host-info.results.host)
      - name: username
        value: $(tasks.host-info.results.username)
      - name: key
        value: id_rsa
      - name: workspace-resources-path
        value: $(tasks.init.results.correlation)
      - name: worspace-qe-subpath
        value: $(params.qe-worspace-subpath) 
      # This is used to run e2e and integration containers
      # Need to integrate a build from main and make it accessible
      # For the time been we are good with latest released version
      - name: crc-version
        value: $(params.crc-version)
      - name: bundle-location
        value: $(tasks.download-bundle.results.target-path)/$(params.bundle-name)
      - name: run-e2e
        value: $(params.run-e2e) 
      - name: e2e-tag
        value: $(params.e2e-tag) 
      - name: e2e-cleanup-target
        value: $(params.target-cleanup) 
      - name: run-integration
        value: $(params.run-integration) 
      - name: integration-tag
        value: $(params.integration-tag) 
      - name: integration-cleanup-target
        value: $(params.target-cleanup) 
      - name: integration-timeout
        value: $(params.integration-timeout)
      - name: debug
        value: $(params.debug) 
      workspaces:
      - name: pipelines-data
        workspace: storage
      - name: ocp-pullsecret
        workspace: ocp-pullsecret
      timeout: "5h"   
    
    - name: s3-upload-results
      runAfter:
        - qe
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/crc-org/ci-definitions
          - name: revision
            value: main
          - name: pathInRepo
            value: s3-uploader/tkn/task.yaml
      params:
        - name: aws-credentials
          value: $(params.aws-credentials)
        - name: pvc
          value: pipelines-data
        - name: ws-output-path
          value: $(tasks.init.results.correlation)
        - name: qe-workspace-subpath
          value: $(params.qe-worspace-subpath)
        - name: s3-bucket
          value: $(params.s3-bucket)
        - name: s3-path
          value: $(params.s3-path)
    - name: opensearch-upload
      runAfter:
        - s3-upload-results
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/crc-org/ci-definitions
          - name: revision
            value: main
          - name: pathInRepo
            value: open-search/upload.yaml
      params:
        - name: index
          value: 'crc-test'
        - name: results-id
          value: $(tasks.init.results.bundle-preset)-linux-arm64
        - name: results-wsstorage-path
          value: $(tasks.init.results.correlation)/$(params.qe-worspace-subpath)
        - name: bundle
          value: "$(tasks.init.results.bundle-version)"
        - name: crc
          value: "$(tasks.init.results.date)"
        
  finally:
    - name: decommission-tester
      when:
        - input: $(params.debug)
          operator: in
          values: ["false"]
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/redhat-developer/mapt.git
          - name: revision
            value: main
          - name: pathInRepo
            value: tkn/infra-aws-fedora.yaml
      params:
        - name: secret-aws-credentials
          value: $(params.aws-credentials)
        - name: secret-rh-credentials
          value: credentials-rh-subs-crcqe-prod
        - name: id
          value: $(tasks.init.results.correlation)
        - name: operation
          value: destroy
        - name: ownerKind
          value: PipelineRun
        - name: ownerName
          value: $(context.pipelineRun.name)
        - name: ownerUid
          value: $(context.pipelineRun.uid)
      timeout: "40m" 
    - name: reportportal-import
      taskRef:
        resolver: git 
        params:
        - name: url
          value: https://github.com/crc-org/ci-definitions
        - name: revision
          value: main
        - name: pathInRepo
          value: reportportal/tkn/import.yaml
      params:
      - name: secret-reportportal
        value: reportportal-crc
      - name: pvc
        value: pipelines-data
      - name: results-id
        value: crc-$(tasks.init.results.bundle-preset)-linux-arm64  
      - name: results-wsstorage-path
        value: $(tasks.init.results.correlation)/$(params.qe-worspace-subpath)
      - name: debug
        value: $(params.debug)
      - name: upload-log
        value: 'true'
      - name: launch-attributes
        value: |
         {"attributes":[{"key":"crc-version","value":"$(tasks.init.results.date)"},{"key":"bundle-version","value":"$(tasks.init.results.bundle-version)"},{"key":"preset","value":"$(tasks.init.results.bundle-preset)"},{"key": "skippedIssue", "value": true}]}
      - name: launch-description
        value: $(params.test-catalog)
      - name: pipelinerunName
        value: $(context.pipelineRun.name)
      timeout: "15m"  
